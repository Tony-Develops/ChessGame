package chessPieces;

import java.util.ArrayList;
import java.util.List;

import tools.Position;
import tools.Type;

public class Bishop extends ChessPiece {

	public Bishop(Position pos, Type type) {
		super(pos, type);
	}

	public Position[] calcPositions(int boardSizeX, int boardSizeY) {
		List<Position> positions = new ArrayList<Position>();
		for (int i = 1; (pos.getPosX() + i) < boardSizeX && (pos.getPosY() + i) < boardSizeY; i ++) {
			positions.add(new Position(pos.getPosX() + i, pos.getPosY() + i));
		}
		for (int i = 1; (pos.getPosX() + i) < boardSizeX && (pos.getPosY() - i) > 0; i ++) {
			positions.add(new Position(pos.getPosX() + i, pos.getPosY() - i));
		}
		for (int i = 1; (pos.getPosX() - i) > 0 && (pos.getPosY() + i) < boardSizeY; i ++) {
			positions.add(new Position(pos.getPosX() - i, pos.getPosY() + 1));
		}
		for (int i = 1; (pos.getPosX() - i) > 0 && (pos.getPosY() - i) > 0; i ++) {
			positions.add(new Position(pos.getPosX() - i, pos.getPosY() - 1));
		}
		return positions.toArray(Position[positions.size()]);
	}

}
